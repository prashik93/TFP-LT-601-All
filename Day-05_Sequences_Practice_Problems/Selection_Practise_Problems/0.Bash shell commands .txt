		## if else START ##	

## 1. Write a program that reads 5 Random 3 Digit values and then outputs the minimum
##    and the maximum value. START
>>>>>
#! /bin/bash/ -x

r1_num=$((RANDOM%900+100))
echo $r1_num

r2_num=$((RANDOM%900+100))
echo $r2_num

r3_num=$((RANDOM%900+100))
echo $r3_num

r4_num=$((RANDOM%900+100))
echo $r4_num

r5_num=$((RANDOM%900+100))
echo $r5_num

num_list=("$r1_num" "$r2_num" "$r3_num" "$r4_num" "$r5_num")

for num in "$num_list"
do
        echo $num
done

max=0
min=1000

for num in "${num_list[@]}"
do
        if [ $num -gt $max ]
        then
                max=$num
        fi

        if [ $num -lt $min ]
        then
                min=$num
        fi
done

echo "Maximum number among 5 is :- $max"
echo "Minimun number among 5 is :- $min"
>>>>>

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-else
$ ./max_min_3digit.sh
+ r1_num=446
+ echo 446
446
+ r2_num=644
+ echo 644
644
+ r3_num=292
+ echo 292
292
+ r4_num=288
+ echo 288
288
+ r5_num=133
+ echo 133
133
+ num_list=("$r1_num" "$r2_num" "$r3_num" "$r4_num" "$r5_num")
+ for num in "$num_list"
+ echo 446
446
+ max=0
+ min=1000
+ for num in "${num_list[@]}"
+ '[' 446 -gt 0 ']'
+ max=446
+ '[' 446 -lt 1000 ']'
+ min=446
+ for num in "${num_list[@]}"
+ '[' 644 -gt 446 ']'
+ max=644
+ '[' 644 -lt 446 ']'
+ for num in "${num_list[@]}"
+ '[' 292 -gt 644 ']'
+ '[' 292 -lt 446 ']'
+ min=292
+ for num in "${num_list[@]}"
+ '[' 288 -gt 644 ']'
+ '[' 288 -lt 292 ']'
+ min=288
+ for num in "${num_list[@]}"
+ '[' 133 -gt 644 ']'
+ '[' 133 -lt 288 ']'
+ min=133
+ echo 'Maximum number among 5 is :- 644'
Maximum number among 5 is :- 644
+ echo 'Minimun number among 5 is :- 133'
Minimun number among 5 is :- 133

## 1. Write a program that reads 5 Random 3 Digit values and then outputs the minimum
##    and the maximum value. EN





## 2. Write a program that takes day and month from the command line and prints true if
##    day of month is between March 20 and June 20, false otherwise.

>>>>>
#! /bin/bash/ -x

read -p " Enter Date :- " date
read -p " Enter Month :- " Month

if (( (($Month==6 && $date<=20) || ($Month==3 && $date>=20)) || (($Month<6 && $date>0) && $Month>3) || (($Month>3 && $date>0) && $Month<6) && ($date<=31) ))
then
        echo $Month $date "True"
else
        echo "False"
fi
>>>>>

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ls
'0.Bash shell commands .txt'   coin_head_or_tail.sh*   max_min_3digit.sh*

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ touch day_of_month.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ls
'0.Bash shell commands .txt'   coin_head_or_tail.sh*   day_of_month.sh   max_min_3digit.sh*

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ nano day_of_month.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./day_of_month.sh
+ read -p ' Enter Date :- ' date
 Enter Date :- 21
+ read -p ' Enter Month :- ' Month
 Enter Month :- 3
+ ((  ((3==6 && 21<=20) || (3==3 && 21>=20)) || ((3<6 && 21>0) && 3>3) || ((3>3 && 21>0) && 3<6) && (21<31)  ))
+ echo 3 21 True
3 21 True

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./day_of_month.sh
+ read -p ' Enter Date :- ' date
 Enter Date :- 18
+ read -p ' Enter Month :- ' Month
 Enter Month :- 3
+ ((  ((3==6 && 18<=20) || (3==3 && 18>=20)) || ((3<6 && 18>0) && 3>3) || ((3>3 && 18>0) && 3<6) && (18<31)  ))
+ echo False
False

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./day_of_month.sh
+ read -p ' Enter Date :- ' date
 Enter Date :- 21
+ read -p ' Enter Month :- ' Month
 Enter Month :- 4
+ ((  ((4==6 && 21<=20) || (4==3 && 21>=20)) || ((4<6 && 21>0) && 4>3) || ((4>3 && 21>0) && 4<6) && (21<31)  ))
+ echo 4 21 True
4 21 True

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./day_of_month.sh
+ read -p ' Enter Date :- ' date
 Enter Date :- 12
+ read -p ' Enter Month :- ' Month
 Enter Month :- 4
+ ((  ((4==6 && 12<=20) || (4==3 && 12>=20)) || ((4<6 && 12>0) && 4>3) || ((4>3 && 12>0) && 4<6) && (12<31)  ))
+ echo 4 12 True
4 12 True

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./day_of_month.sh
+ read -p ' Enter Date :- ' date
 Enter Date :- 21
+ read -p ' Enter Month :- ' Month
 Enter Month :- 6
+ ((  ((6==6 && 21<=20) || (6==3 && 21>=20)) || ((6<6 && 21>0) && 6>3) || ((6>3 && 21>0) && 6<6) && (21<31)  ))
+ echo False
False

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./day_of_month.sh
+ read -p ' Enter Date :- ' date
 Enter Date :- 20
+ read -p ' Enter Month :- ' Month
 Enter Month :- 6
+ ((  ((6==6 && 20<=20) || (6==3 && 20>=20)) || ((6<6 && 20>0) && 6>3) || ((6>3 && 20>0) && 6<6) && (20<31)  ))
+ echo 6 20 True
6 20 True

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./day_of_month.sh
+ read -p ' Enter Date :- ' date
 Enter Date :- 5
+ read -p ' Enter Month :- ' Month
 Enter Month :- 3
+ ((  ((3==6 && 5<=20) || (3==3 && 5>=20)) || ((3<6 && 5>0) && 3>3) || ((3>3 && 5>0) && 3<6) && (5<31)  ))
+ echo False
False

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./day_of_month.sh
+ read -p ' Enter Date :- ' date
 Enter Date :- 5
+ read -p ' Enter Month :- ' Month
 Enter Month :- 6
+ ((  ((6==6 && 5<=20) || (6==3 && 5>=20)) || ((6<6 && 5>0) && 6>3) || ((6>3 && 5>0) && 6<6) && (5<31)  ))
+ echo 6 5 True
6 5 True

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./day_of_month.sh
+ read -p ' Enter Date :- ' date
 Enter Date :- 19
+ read -p ' Enter Month :- ' Month
 Enter Month :- 6
+ ((  ((6==6 && 19<=20) || (6==3 && 19>=20)) || ((6<6 && 19>0) && 6>3) || ((6>3 && 19>0) && 6<6) && (19<31)  ))
+ echo 6 19 True
6 19 True

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ nano day_of_month.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./day_of_month.sh
+ read -p ' Enter Date :- ' date
 Enter Date :- 31
+ read -p ' Enter Month :- ' Month
 Enter Month :- 3
+ ((  ((3==6 && 31<=20) || (3==3 && 31>=20)) || ((3<6 && 31>0) && 3>3) || ((3>3 && 31>0) && 3<6) && (31<=31)  ))
+ echo 3 31 True
3 31 True

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./day_of_month.sh
+ read -p ' Enter Date :- ' date
 Enter Date :- 31
+ read -p ' Enter Month :- ' Month
 Enter Month :- 5
+ ((  ((5==6 && 31<=20) || (5==3 && 31>=20)) || ((5<6 && 31>0) && 5>3) || ((5>3 && 31>0) && 5<6) && (31<=31)  ))
+ echo 5 31 True
5 31 True


## 2. Write a program that takes day and month from the command line and prints true if
##    day of month is between March 20 and June 20, false otherwise. END




## 3. Write a program that takes a year as input and outputs the Year is a Leap Year or not
##     a Leap Year. A Leap Year checks for 4 Digit Number, Divisible by 4 and not 100 unless
##     divisible by 400.  START

>>>>>
#! /bin/bash/ -x

read -p " Enter year to check wether it is Leap or Not :- " Year

if (( (($Year % 4 == 0) && ($Year % 100 != 0)) || ($Year % 400 == 0) ))
then
        echo $Year "Leap Year"
else
        echo $Year "Not a Leap Year"

fi
>>>>>

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ls
'0.Bash shell commands .txt'   coin_head_or_tail.sh*   day_of_month.sh*   max_min_3digit.sh*

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ touch leap_year.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ls
'0.Bash shell commands .txt'   coin_head_or_tail.sh*   day_of_month.sh*   leap_year.sh   max_min_3digit.sh*

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ nano leap_year.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./leap_year.sh
+ read -p ' Enter year to check wether it is Leap or Not :- ' Year
 Enter year to check wether it is Leap or Not :- 1600
+ ((  ((1600 % 4 == 0) && (1600 % 100 != 0)) || (1600 % 400 == 0)  ))
+ echo 1600 'Leap Year'
1600 Leap Year

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./leap_year.sh
+ read -p ' Enter year to check wether it is Leap or Not :- ' Year
 Enter year to check wether it is Leap or Not :- 1900
+ ((  ((1900 % 4 == 0) && (1900 % 100 != 0)) || (1900 % 400 == 0)  ))
+ echo 1900 'Not a Leap Year'
1900 Not a Leap Year

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./leap_year.sh
+ read -p ' Enter year to check wether it is Leap or Not :- ' Year
 Enter year to check wether it is Leap or Not :- 1904
+ ((  ((1904 % 4 == 0) && (1904 % 100 != 0)) || (1904 % 400 == 0)  ))
+ echo 1904 'Leap Year'
1904 Leap Year

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./leap_year.sh
+ read -p ' Enter year to check wether it is Leap or Not :- ' Year
 Enter year to check wether it is Leap or Not :- 1902
+ ((  ((1902 % 4 == 0) && (1902 % 100 != 0)) || (1902 % 400 == 0)  ))
+ echo 1902 'Not a Leap Year'
1902 Not a Leap Year

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./leap_year.sh
+ read -p ' Enter year to check wether it is Leap or Not :- ' Year
 Enter year to check wether it is Leap or Not :- 2100
+ ((  ((2100 % 4 == 0) && (2100 % 100 != 0)) || (2100 % 400 == 0)  ))
+ echo 2100 'Not a Leap Year'
2100 Not a Leap Year

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./leap_year.sh
+ read -p ' Enter year to check wether it is Leap or Not :- ' Year
 Enter year to check wether it is Leap or Not :- 1900
+ ((  ((1900 % 4 == 0) && (1900 % 100 != 0)) || (1900 % 400 == 0)  ))
+ echo 1900 'Not a Leap Year'
1900 Not a Leap Year

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./leap_year.sh
+ read -p ' Enter year to check wether it is Leap or Not :- ' Year
 Enter year to check wether it is Leap or Not :- 2300
+ ((  ((2300 % 4 == 0) && (2300 % 100 != 0)) || (2300 % 400 == 0)  ))
+ echo 2300 'Not a Leap Year'
2300 Not a Leap Year

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./leap_year.sh
+ read -p ' Enter year to check wether it is Leap or Not :- ' Year
 Enter year to check wether it is Leap or Not :- 2304
+ ((  ((2304 % 4 == 0) && (2304 % 100 != 0)) || (2304 % 400 == 0)  ))
+ echo 2304 'Leap Year'
2304 Leap Year

## 3. Write a program that takes a year as input and outputs the Year is a Leap Year or not
##     a Leap Year. A Leap Year checks for 4 Digit Number, Divisible by 4 and not 100 unless
##     divisible by 400.  END



## 4. Write a program to simulate a coin flip and print out "Heads" or "Tails" accordingly. START

>>>>>
#! /bin/bash/ -x

coin_flip=$((RANDOM%2))

if [ $coin_flip -eq 1 ]
then
echo "Head"

else
echo "Tail"

fi
>>>>>

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems
$ ls
'0. Bash shell commands .txt'   case_head_or_tail.sh*   head_or_tail.sh*
 Sequence_Practice_Problems/    case_single_digit.sh*   random_day_in_week.sh*
 case_day_in_week.sh*           function.sh*            random_single_digit.sh*
 case_greater_or_not.sh         greater_or_not.sh*

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems
$ mkdir Selection_Practise_Problems

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems
$ ls
'0. Bash shell commands .txt'   case_greater_or_not.sh   greater_or_not.sh*
 Selection_Practise_Problems/   case_head_or_tail.sh*    head_or_tail.sh*
 Sequence_Practice_Problems/    case_single_digit.sh*    random_day_in_week.sh*
 case_day_in_week.sh*           function.sh*             random_single_digit.sh*

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems
$ cd Selection_Practise_Problems/

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ls

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ touch coin_head_or_tail.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ nano coin_head_or_tail.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./coin_head_or_tail.sh
+ coin_flip=0
+ '[' 0 -eq 1 ']'
+ echo Tail
Tail

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./coin_head_or_tail.sh
+ coin_flip=0
+ '[' 0 -eq 1 ']'
+ echo Tail
Tail

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./coin_head_or_tail.sh
+ coin_flip=0
+ '[' 0 -eq 1 ']'
+ echo Tail
Tail

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./coin_head_or_tail.sh
+ coin_flip=1
+ '[' 1 -eq 1 ']'
+ echo Head
Head

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems
$ ./coin_head_or_tail.sh
+ coin_flip=1
+ '[' 1 -eq 1 ']'
+ echo Head
Head

## ## 4. Write a program to simulate a coin flip and print out "Heads" or "Tails" accordingly. END

		## if else END ##


		

		## if elif else START ##

## 1. Read a single digit number and write the number in word. START

>>>
#! /bin/bash/ -x

read -p " Enter single digit number :- " number
echo $number

if [ $number -eq 0 ]
then
        echo "Zero"

elif [ $number -eq 1 ]
then
        echo "One"

elif [ $number -eq 2 ]
then
        echo "Two"

elif [ $number -eq 3 ]
then
        echo "Three"

elif [ $number -eq 4 ]
then
        echo "Four"

elif [ $number -eq 5 ]
then
        echo "Five"

elif [ $number -eq 6 ]
then
        echo "Six"

elif [ $number -eq 7 ]
then
        echo "Seven"

elif [ $number -eq 8 ]
then
        echo "Eight"

elif [ $number -eq 9 ]
then
        echo "Nine"

else
        echo "Given number is not a single digit number"

fi
>>>

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ls

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ touch rw_single_digit.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ls
rw_single_digit.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ nano rw_single_digit.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./rw_single_digit.sh
+ read -p ' Enter single digit number :- ' number
 Enter single digit number :- 0
+ echo 0
0
+ '[' 0 -eq 0 ']'
+ echo Zero
Zero

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./rw_single_digit.sh
+ read -p ' Enter single digit number :- ' number
 Enter single digit number :- 1
+ echo 1
1
+ '[' 1 -eq 0 ']'
+ '[' 1 -eq 1 ']'
+ echo One
One

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./rw_single_digit.sh
+ read -p ' Enter single digit number :- ' number
 Enter single digit number :- 2
+ echo 2
2
+ '[' 2 -eq 0 ']'
+ '[' 2 -eq 1 ']'
+ '[' 2 -eq 2 ']'
+ echo Two
Two

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./rw_single_digit.sh
+ read -p ' Enter single digit number :- ' number
 Enter single digit number :- 3
+ echo 3
3
+ '[' 3 -eq 0 ']'
+ '[' 3 -eq 1 ']'
+ '[' 3 -eq 2 ']'
+ '[' 3 -eq 3 ']'
+ echo Three
Three

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./rw_single_digit.sh
+ read -p ' Enter single digit number :- ' number
 Enter single digit number :- 4
+ echo 4
4
+ '[' 4 -eq 0 ']'
+ '[' 4 -eq 1 ']'
+ '[' 4 -eq 2 ']'
+ '[' 4 -eq 3 ']'
+ '[' 4 -eq 4 ']'
+ echo Four
Four

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./rw_single_digit.sh
+ read -p ' Enter single digit number :- ' number
 Enter single digit number :- 5
+ echo 5
5
+ '[' 5 -eq 0 ']'
+ '[' 5 -eq 1 ']'
+ '[' 5 -eq 2 ']'
+ '[' 5 -eq 3 ']'
+ '[' 5 -eq 4 ']'
+ '[' 5 -eq 5 ']'
+ echo Five
Five

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./rw_single_digit.sh
+ read -p ' Enter single digit number :- ' number
 Enter single digit number :- 6
+ echo 6
6
+ '[' 6 -eq 0 ']'
+ '[' 6 -eq 1 ']'
+ '[' 6 -eq 2 ']'
+ '[' 6 -eq 3 ']'
+ '[' 6 -eq 4 ']'
+ '[' 6 -eq 5 ']'
+ '[' 6 -eq 6 ']'
+ echo Six
Six

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./rw_single_digit.sh
+ read -p ' Enter single digit number :- ' number
 Enter single digit number :- 7
+ echo 7
7
+ '[' 7 -eq 0 ']'
+ '[' 7 -eq 1 ']'
+ '[' 7 -eq 2 ']'
+ '[' 7 -eq 3 ']'
+ '[' 7 -eq 4 ']'
+ '[' 7 -eq 5 ']'
+ '[' 7 -eq 6 ']'
+ '[' 7 -eq 7 ']'
+ echo Seven
Seven


INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./rw_single_digit.sh
+ read -p ' Enter single digit number :- ' number
 Enter single digit number :- 8
+ echo 8
8
+ '[' 8 -eq 0 ']'
+ '[' 8 -eq 1 ']'
+ '[' 8 -eq 2 ']'
+ '[' 8 -eq 3 ']'
+ '[' 8 -eq 4 ']'
+ '[' 8 -eq 5 ']'
+ '[' 8 -eq 6 ']'
+ '[' 8 -eq 7 ']'
+ '[' 8 -eq 8 ']'
+ echo Eight
Eight

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./rw_single_digit.sh
+ read -p ' Enter single digit number :- ' number
 Enter single digit number :- 9
+ echo 9
9
+ '[' 9 -eq 0 ']'
+ '[' 9 -eq 1 ']'
+ '[' 9 -eq 2 ']'
+ '[' 9 -eq 3 ']'
+ '[' 9 -eq 4 ']'
+ '[' 9 -eq 5 ']'
+ '[' 9 -eq 6 ']'
+ '[' 9 -eq 7 ']'
+ '[' 9 -eq 8 ']'
+ '[' 9 -eq 9 ']'
+ echo Nine
Nine

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./rw_single_digit.sh
+ read -p ' Enter single digit number :- ' number
 Enter single digit number :- 10
+ echo 10
10
+ '[' 10 -eq 0 ']'
+ '[' 10 -eq 1 ']'
+ '[' 10 -eq 2 ']'
+ '[' 10 -eq 3 ']'
+ '[' 10 -eq 4 ']'
+ '[' 10 -eq 5 ']'
+ '[' 10 -eq 6 ']'
+ '[' 10 -eq 7 ']'
+ '[' 10 -eq 8 ']'
+ '[' 10 -eq 9 ']'
+ echo 'Given number is not a single digit number'
Given number is not a single digit number

## 1. Read a single digit number and write the number in word. END



## 2. Read a Number and Display the week day (Sunday, Monday,...). START
>>>>>
#! /bin/bash/ -x

echo "Enter a number :- "
read num

if [ $num -eq 1 ]
then
        echo "Sunday"

elif [ $num -eq 2 ]
then
        echo "Monday"

elif [ $num -eq 3 ]
then
        echo "Tuesday"

elif [ $num -eq 4 ]
then
        echo "Wednesday"

elif [ $num -eq 5 ]
then
        echo "Thursday"

elif [ $num -eq 6 ]
then
        echo "Friday"

elif [ $num -eq 7 ]
then
        echo "Saturday"

else
        echo "Enter number between 1 to 7"

fi
>>>>>
INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ls
'0.Bash shell commands .txt'   rw_single_digit.sh*

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ touch ds_week_day.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ls
'0.Bash shell commands .txt'   ds_week_day.sh   rw_single_digit.sh*

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ nano ds_week_day.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
1
+ '[' 1 -eq 1 ']'
+ echo Sunday
Sunday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
2
+ '[' 2 -eq 1 ']'
+ '[' 2 -eq 2 ']'
+ echo Monday
Monday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
3
+ '[' 3 -eq 1 ']'
+ '[' 3 -eq 2 ']'
+ '[' 3 -eq 3 ']'
+ echo Tuesday
Tuesday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
4
+ '[' 4 -eq 1 ']'
+ '[' 4 -eq 2 ']'
+ '[' 4 -eq 3 ']'
+ '[' 4 -eq 4 ']'
+ echo Wednesday
Wednesday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
5
+ '[' 5 -eq 1 ']'
+ '[' 5 -eq 2 ']'
+ '[' 5 -eq 3 ']'
+ '[' 5 -eq 4 ']'
+ '[' 5 -eq 5 ']'
+ echo Thursday
Thursday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
6
+ '[' 6 -eq 1 ']'
+ '[' 6 -eq 2 ']'
+ '[' 6 -eq 3 ']'
+ '[' 6 -eq 4 ']'
+ '[' 6 -eq 5 ']'
+ '[' 6 -eq 6 ']'
+ echo Friday
Friday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
7
+ '[' 7 -eq 1 ']'
+ '[' 7 -eq 2 ']'
+ '[' 7 -eq 3 ']'
+ '[' 7 -eq 4 ']'
+ '[' 7 -eq 5 ']'
+ '[' 7 -eq 6 ']'
+ '[' 7 -eq 7 ']'
+ echo Saturday
Saturday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
8
+ '[' 8 -eq 1 ']'
+ '[' 8 -eq 2 ']'
+ '[' 8 -eq 3 ']'
+ '[' 8 -eq 4 ']'
+ '[' 8 -eq 5 ']'
+ '[' 8 -eq 6 ']'
+ '[' 8 -eq 7 ']'
+ echo 'Enter number between 1 to 7'
Enter number between 1 to 7

## 2. Read a Number and Display the week day (Sunday, Monday,...). END



## 3. Read a Number 1, 10, 100, 1000, etc and display unit, ten, hundred,... START
>>>>>
#! /bin/bash/ -x

echo -p " Enter a Number :- "
read num

if [ $num -eq 1 ]
then
        echo "Unit"

elif [ $num -eq 10 ]
then
        echo "Ten"

elif [ $num -eq 100 ]
then
        echo "Hundred"

elif [ $num -eq 1000 ]
then
        echo "Thousand"

else
        echo "Please enter 1, 10, 100 and 1000 only"
fi
>>>>>

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./ds_unit.sh
+ echo -p ' Enter a Number :- '
-p  Enter a Number :-
+ read num
1
+ '[' 1 -eq 1 ']'
+ echo Unit
Unit

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./ds_unit.sh
+ echo -p ' Enter a Number :- '
-p  Enter a Number :-
+ read num
10
+ '[' 10 -eq 1 ']'
+ '[' 10 -eq 10 ']'
+ echo Ten
Ten

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./ds_unit.sh
+ echo -p ' Enter a Number :- '
-p  Enter a Number :-
+ read num
100
+ '[' 100 -eq 1 ']'
+ '[' 100 -eq 10 ']'
+ '[' 100 -eq 100 ']'
+ echo Hundred
Hundred

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./ds_unit.sh
+ echo -p ' Enter a Number :- '
-p  Enter a Number :-
+ read num
1000
+ '[' 1000 -eq 1 ']'
+ '[' 1000 -eq 10 ']'
+ '[' 1000 -eq 100 ']'
+ '[' 1000 -eq 1000 ']'
+ echo Thousand
Thousand

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./ds_unit.sh
+ echo -p ' Enter a Number :- '
-p  Enter a Number :-
+ read num
12
+ '[' 12 -eq 1 ']'
+ '[' 12 -eq 10 ']'
+ '[' 12 -eq 100 ']'
+ '[' 12 -eq 1000 ']'
+ echo 'Please enter 1, 10, 100 and 1000 only'
Please enter 1, 10, 100 and 1000 only

## 3. Read a Number 1, 10, 100, 1000, etc and display unit, ten, hundred,... END



## 4. Enter 3 Numbers do following arithmetic operation and find the one that
      is maximum and minimum
      1. a + b * c          3. c + a / b
      2. a % b + c          4. a * b + c
## START
>>>>>
#! /bin/bash/ -x

echo "Enter 3 numbers :- "
read first
echo $first
read second
echo $second
read third
echo $third

operation_list=("$first_operation" "$second_operation" "$third_operation" "$fourth_operation")

operation_list[0]=$(awk 'BEGIN {print '$first' + '$second' * '$third'}')
operation_list[1]=$(awk 'BEGIN {print '$first' % '$second' + '$third'}')
#operation_list[2]=$(awk 'BEGIN {print '$third' + (('$first'/'$second')) }')
operation_list[2]=`expr $third + $first / $second`
operation_list[3]=$(awk 'BEGIN {print '$first' * '$second' + '$third'}')

echo "----------------------------"
a=`expr $third + $first / $second`
echo $a
echo "----------------------------"

echo ${operation_list[0]}
echo ${operation_list[1]}
echo ${operation_list[2]}
echo ${operation_list[3]}


max=0
min=1000

for num in ${operation_list[@]}
do
        if [ $num -gt $max ]
        then
                max=$num

        elif [ $num -lt $min ]
        then
                min=$num

        else
                echo "Nothing to compare"
        fi
done

echo "Maximum value :- $max"
echo "Minimun value :- $min"
>>>>>

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ nano arithmetic_operation.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/if-elif-else
$ ./arithmetic_operation.sh
+ echo 'Enter 3 numbers :- '
Enter 3 numbers :-
+ read first
1
+ echo 1
1
+ read second
5
+ echo 5
5
+ read third
8
+ echo 8
8
+ operation_list=("$first_operation" "$second_operation" "$third_operation" "$fourth_operation")
++ awk 'BEGIN {print 1 + 5 * 8}'
+ operation_list[0]=41
++ awk 'BEGIN {print 1 % 5 + 8}'
+ operation_list[1]=9
++ expr 8 + 1 / 5
+ operation_list[2]=8
++ awk 'BEGIN {print 1 * 5 + 8}'
+ operation_list[3]=13
+ echo ----------------------------
----------------------------
++ expr 8 + 1 / 5
+ a=8
+ echo 8
8
+ echo ----------------------------
----------------------------
+ echo 41
41
+ echo 9
9
+ echo 8
8
+ echo 13
13
+ max=0
+ min=1000
+ for num in ${operation_list[@]}
+ '[' 41 -gt 0 ']'
+ max=41
+ for num in ${operation_list[@]}
+ '[' 9 -gt 41 ']'
+ '[' 9 -lt 1000 ']'
+ min=9
+ for num in ${operation_list[@]}
+ '[' 8 -gt 41 ']'
+ '[' 8 -lt 9 ']'
+ min=8
+ for num in ${operation_list[@]}
+ '[' 13 -gt 41 ']'
+ '[' 13 -lt 8 ']'
+ echo 'Nothing to compare'
Nothing to compare
+ echo 'Maximum value :- 41'
Maximum value :- 41
+ echo 'Minimun value :- 8'
Minimun value :- 8

## 4. Enter 3 Numbers do following arithmetic operation and find the one that
      is maximum and minimum
      1. a + b * c          3. c + a / b
      2. a % b + c          4. a * b + c
## END


		## if elif else END ##



		
		## case START ##

## 1. Read a single digit number and write the number in word using Case START
>>>>>
#! /bin/bash/ -x

echo -p "Enter a number :- "
read num

case $num in
        0)
        echo "Zero"
        ;;
        1)
        echo "One"
        ;;
        2)
        echo "Two"
        ;;
        3)
        echo "Three"
        ;;
        4)
        echo "Four"
        ;;
        5)
        echo "Five"
        ;;
        6)
        echo "Six"
        ;;
        7)
        echo "Seven"
        ;;
        8)
        echo "Eight"
        ;;
        9)
        echo "Nine"
        ;;
        *)
        echo "Please enter a single digit"
        ;;
esac
>>>>>

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ touch single_digit.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ls
single_digit.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ nano single_digit.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./single_digit.sh
+ echo -p 'Enter a number :- '
-p Enter a number :-
+ read num
0
+ case $num in
+ echo 'Please enter a single digit'
Please enter a single digit

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./single_digit.sh
+ echo -p 'Enter a number :- '
-p Enter a number :-
+ read num
1
+ case $num in
+ echo One
One

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./single_digit.sh
+ echo -p 'Enter a number :- '
-p Enter a number :-
+ read num
2
+ case $num in
+ echo Two
Two

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./single_digit.sh
+ echo -p 'Enter a number :- '
-p Enter a number :-
+ read num
3
+ case $num in
+ echo Three
Three

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./single_digit.sh
+ echo -p 'Enter a number :- '
-p Enter a number :-
+ read num
4
+ case $num in
+ echo Four
Four

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./single_digit.sh
+ echo -p 'Enter a number :- '
-p Enter a number :-
+ read num
5
+ case $num in
+ echo Five
Five

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./single_digit.sh
+ echo -p 'Enter a number :- '
-p Enter a number :-
+ read num
6
+ case $num in
+ echo Six
Six

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./single_digit.sh
+ echo -p 'Enter a number :- '
-p Enter a number :-
+ read num
7
+ case $num in
+ echo Seven
Seven

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./single_digit.sh
+ echo -p 'Enter a number :- '
-p Enter a number :-
+ read num
8
+ case $num in
+ echo Eight
Eight

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./single_digit.sh
+ echo -p 'Enter a number :- '
-p Enter a number :-
+ read num
9
+ case $num in
+ echo Nine
Nine

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$  Enter a number :-
+ read num
10
+ case $num in
+ echo 'Please enter a single digit'
Please enter a single digit

## 1. Read a single digit number and write the number in word using Case END



## 2. Read a Number and Display the week day (Sunday, Monday,...). START
>>>>>
echo "Enter a number :- "
read num

case $num in
        1)
        echo "Sunday"
        ;;
        2)
        echo "Monday"
        ;;
        3)
        echo "Tuesday"
        ;;
        4)
        echo "Wednesday"
        ;;
        5)
        echo "Thursday"
        ;;
        6)
        echo "Friday"
        ;;
        7)
        echo "Saturday"
        ;;
        *)
        echo "Please enter a number between 1 to 7"
        ;;
esac
>>>>>

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ls
'0.Bash shell commands .txt'   single_digit.sh*

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ touch ds_week_day.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ls
'0.Bash shell commands .txt'   ds_week_day.sh   single_digit.sh*

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ nano ds_week_day.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
1
+ case $num in
+ echo Sunday
Sunday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
2
+ case $num in
+ echo Monday
Monday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
3
+ case $num in
+ echo Tuesday
Tuesday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
4
+ case $num in
+ echo Wednesday
Wednesday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
5
+ case $num in
+ echo Thursday
Thursday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
6
+ case $num in
+ echo Friday
Friday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
7
+ case $num in
+ echo Saturday
Saturday

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./ds_week_day.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
8
+ case $num in
+ echo 'Please enter a number between 1 to 7'
Please enter a number between 1 to 7

## 2. Read a Number and Display the week day (Sunday, Monday,...). END



## 3. Read a Number 1, 10, 100, 1000, etc and display unit, ten, hundred,... START
>>>>>
#! /bin/bash/ -x

echo "Enter a number :- "
read num

case $num in
        1)
        echo "Unit"
        ;;
        10)
        echo "Ten"
        ;;
        100)
        echo "Hundred"
        ;;
        1000)
        echo "Thousand"
        ;;
        *)
        echo "Please enter number like 1, 10 , 100 and 1000 only"
esac
>>>>>

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ls
'0.Bash shell commands .txt'   ds_week_day.sh*   single_digit.sh*

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ touch ds_unit.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ls
'0.Bash shell commands .txt'   ds_unit.sh   ds_week_day.sh*   single_digit.sh*

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ nano ds_unit.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./ds_unit.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
1
+ case $num in
+ echo Unit
Unit

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./ds_unit.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
10
+ case $num in
+ echo Ten
Ten

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./ds_unit.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
100
+ case $num in
+ echo Hundred
Hundred

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./ds_unit.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
1000
+ case $num in
+ echo Thousand
Thousand

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./ds_unit.sh
+ echo 'Enter a number :- '
Enter a number :-
+ read num
123
+ case $num in
+ echo 'Please enter number like 1, 10 , 100 and 1000 only'
Please enter number like 1, 10 , 100 and 1000 only

## 3. Read a Number 1, 10, 100, 1000, etc and display unit, ten, hundred,... END



## 4. Write a program that takes User Inputs and does Unit Conversion of
      different Length units
      1. Feet to Inch        3. Inch to Feet
      2. Feet to Meter       4. Meter to Feet
## START
>>>>>

>>>>>

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ls
'0.Bash shell commands .txt'   ds_unit.sh*   ds_week_day.sh*   single_digit.sh*

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ touch unit_conversion.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ls
'0.Bash shell commands .txt'   ds_unit.sh*   ds_week_day.sh*   single_digit.sh*   unit_conversion.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ nano unit_conversion.sh

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./unit_conversion.sh
+ echo '1. Feet to Inch'
1. Feet to Inch
+ echo '2. Feet to Meter'
2. Feet to Meter
+ echo '3. Inch to Feet'
3. Inch to Feet
+ echo '4. Meter to Feet'
4. Meter to Feet
+ read num
1
+ case "$num" in
+ echo 'Enter value in feet :- '
Enter value in feet :-
+ read value
1
+ inch=12
+ echo '1 feet= 12 inch'
1 feet= 12 inch

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./unit_conversion.sh
+ echo '1. Feet to Inch'
1. Feet to Inch
+ echo '2. Feet to Meter'
2. Feet to Meter
+ echo '3. Inch to Feet'
3. Inch to Feet
+ echo '4. Meter to Feet'
4. Meter to Feet
+ read num
2
+ case "$num" in
+ echo 'Enter value in feet :- '
Enter value in feet :-
+ read value
4
+ meter_value=0.3048
++ awk 'BEGIN {print 4 * 0.3048}'
+ meter=1.2192
+ echo '4 feet= 1.2192 meter'
4 feet= 1.2192 meter

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./unit_conversion.sh
+ echo '1. Feet to Inch'
1. Feet to Inch
+ echo '2. Feet to Meter'
2. Feet to Meter
+ echo '3. Inch to Feet'
3. Inch to Feet
+ echo '4. Meter to Feet'
4. Meter to Feet
+ read num
3
+ case "$num" in
+ echo 'Enter value in inch :- '
Enter value in inch :-
+ read value
1
+ inch_value=0.8333333
++ awk 'BEGIN {print 1 * 0.8333333}'
+ feet=0.833333
+ echo '1 inch= 0.833333 feet'
1 inch= 0.833333 feet

INTEL@DESKTOP-6MVPNNQ MINGW64 ~/Desktop/Day-05_Sequences_Practice_Problems/Selection_Practise_Problems/case-statement
$ ./unit_conversion.sh
+ echo '1. Feet to Inch'
1. Feet to Inch
+ echo '2. Feet to Meter'
2. Feet to Meter
+ echo '3. Inch to Feet'
3. Inch to Feet
+ echo '4. Meter to Feet'
4. Meter to Feet
+ read num
4
+ case "$num" in
+ echo 'Enter value in meter :- '
Enter value in meter :-
+ read value
1
+ feet_value=3.28084
++ awk 'BEGIN {print 1 * 3.28084}'
+ feet=3.28084
+ echo '1 meter= 3.28084 feet'
1 meter= 3.28084 feet


## 4. Write a program that takes User Inputs and does Unit Conversion of
      different Length units
      1. Feet to Inch        3. Inch to Feet
      2. Feet to Meter       4. Meter to Feet
## END


		## case END ##